services:
  server:
    build:
      context: .
      dockerfile: website/Dockerfile
    env_file:
      - .env
    container_name: ${CONTAINER_APP_NAME}
    command: [ "app" ]
    expose:
      - "8000"
    depends_on:
      megano_db:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    restart: always
    networks:
      my_network:
        ipv4_address: 172.18.0.4
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media

  megano_db:
    image: postgres:15.7-alpine
    env_file:
      - .env
    container_name: ${CONTAINER_DATABASE_NAME}
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${DB_NAME} -U ${DB_USER}" ]
      interval: 10s
      timeout: 10s
      retries: 30
    volumes:
#      - ./db/:/var/lib/postgresql/data
      - ./docker_settings/PostgreSQL/:/etc/postgresql/conf
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/conf/postgresql.conf
    networks:
      my_network:
        ipv4_address: 172.18.0.2
    restart: always

  pgbouncer:
    build:
      context: ./docker_settings/PgBouncer
      dockerfile: Dockerfile
    container_name: ${CONTAINER_BOUNCER_NAME}
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASS}
      - DB_HOST=${CONTAINER_DATABASE_NAME}
      - DB_NAME=${DB_NAME}
      - POOL_MODE=${POOL_MODE}
      - MAX_CLIENT_CONN=${MAX_CLIENT_CONN}
      - DEFAULT_POOL_SIZE=${DEFAULT_POOL_SIZE}
    expose:
      - "6432"
    depends_on:
      megano_db:
        condition: service_healthy
    networks:
      my_network:
        ipv4_address: 172.18.0.3
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h localhost -p 6432 -U ${DB_USER} -d ${DB_NAME} || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    env_file:
      - .env
    container_name: ${CONTAINER_REDIS_NAME}
    expose:
      - ${REDIS_PORT}
    depends_on:
      megano_db:
        condition: service_healthy
      pgbouncer:
        condition: service_healthy
    networks:
      my_network:
        ipv4_address: 172.18.0.6
    restart: always
    volumes:
      - redis_data:/data

  nginx:
    build:
      context: ./docker_settings/Nginx
      dockerfile: Dockerfile
    container_name: ${CONTAINER_NGINX_NAME}
    env_file:
      - .env
    ports:
      - "80:80"
    depends_on:
      - server
    networks:
      - my_network
    restart: always
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media

volumes:
  static_volume:
  media_volume:
  redis_data:

networks:
  my_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16